$fix-mqs: false !default;

@mixin respond-min($width) {
	@if $fix-mqs {
		@if $fix-mqs >= $width {
			@content;	
		}
	}
	@else {
		@media screen and (min-width: $width) {
			@content;
		}
	}
}
@mixin respond-max($width) {
	@if $fix-mqs {
		@if $fix-mqs <= $width {
			@content;	
		}
	}
	@else {
		@media screen and (max-width: $width) {
			@content;
		}
	}
}

$old-ie: false !default;

@mixin old-ie {
	@if $old-ie {
		@content;
	}
}

@mixin background-image-retina($file, $type, $width, $height) {
  background-image: url($file + '.' + $type);
 
  @media (-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2) {
    & {
      background-image: url($file + '@2x.' + $type);
      -webkit-background-size: $width $height;
    }
  }
}

@mixin retina-sprite($file, $type, $width, $height, $left, $top, $sprite_width, $sprite_height){
  width: $width + px;
  height: $height + px;
  background-image: url($file + '.' + $type);
  background-position:$left + px $top + px;

  @media (-webkit-min-device-pixel-ratio: 2), (min--moz-device-pixel-ratio: 2) {
    & {
      background-image: url($file + '@2x.' + $type);
      background-position:$left + px $top + px;
	  -webkit-background-size: $width + px $height + px;
	  background-size: $sprite_width + px $sprite_height + px;
    }
  }
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem($property, $values) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  } 

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  } 
  
  #{$property}: $pxValues; 
  #{$property}: $remValues; 
}

// @include rem-fallback(margin, 10, 20, 30, 40);